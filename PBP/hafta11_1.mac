
	NOLIST
; PICBASIC PRO(TM) Compiler 2.60, (c) 1998, 2009 microEngineering Labs, Inc. All Rights Reserved. 

LABEL?L macro Label
        RST?RP
    ifdef PM_USED
        LALL
Label
        XALL
    else
Label
    endif
    endm

ADD?BBB macro Bin1, Bin2, Bout
    if ((Bout) == (Bin1))
        MOVE?BA Bin2
        CHK?RP  Bin1
        addwf   Bin1, F
    else
      if ((Bout) == (Bin2))
        MOVE?BA Bin1
        CHK?RP  Bin2
        addwf   Bin2, F
      else
        MOVE?BA Bin1
        CHK?RP  Bin2
        addwf   Bin2, W
        MOVE?AB Bout
      endif
    endif
    endm

ADD?BWB macro Bin, Win, Bout
        MOVE?BA Win
    if ((Bout) == (Bin))
        CHK?RP  Bout
        addwf   Bout, F
    else
        CHK?RP  Bin
        addwf   Bin, W
        MOVE?AB Bout
    endif
    endm

DIV?BBB macro Bin1, Bin2, Bout
        MOVE?BW Bin1, R0
        MOVE?BW Bin2, R1
        L?CALL  DIV
        MOVE?AB Bout
    endm
DIV_USED = 1

MOD?BCW macro Bin, Cin, Wout
        MOVE?BW Bin, R0
        MOVE?CW Cin, R1
        L?CALL  DIV
        MOVE?WW R2, Wout
    endm
DIV_USED = 1

MUL?BBB macro Bin1, Bin2, Bout
        MOVE?BW Bin1, R3
        MOVE?BW Bin2, R1
        L?CALL  MUL
        MOVE?AB Bout
    endm
MUL_USED = 1

MUL?WCW macro Win, Cin, Wout
        MOVE?WW Win, R3
        MOVE?CW Cin, R1
        L?CALL  MUL
        MOVE?AWW R2, Wout
    endm
MUL_USED = 1

SUB?BBB macro Bin1, Bin2, Bout
    if ((Bout) == (Bin1))
        MOVE?BA Bin2
        CHK?RP  Bout
        subwf   Bout, F
    else
        MOVE?BA Bin2
        CHK?RP  Bin1
        subwf   Bin1, W
        MOVE?AB Bout
    endif
    endm

LAND?BBW macro Bin1, Bin2, Wout
        MOVE?BB Bin1, FSR
        MOVE?BA Bin2
        L?CALL  LAND
        MOVE?AB Wout
        movwf   Wout + 1
    endm
LAND_USED = 1

CMPF?WL macro Win, Label
        CLRWDT?
        MOVE?BA Win
        iorwf   (Win) + 1, W
        BIT?GOTO 1, STATUS, Z, Label
    endm

CMPEQ?BCB macro Bin, Cin, Bout
    if (((Cin) > -100h) & ((Cin) < 100h))
        MOVE?BA Bin
        sublw   Cin
	btfss	STATUS, Z
        movlw   -1
	xorlw	0ffh
        MOVE?AB Bout
    else
        CHK?RP  Bout
        clrf    Bout
    endif
    endm

CMPGE?BCL macro Bin, Cin, Label
    if ((Cin) <= 0)
        L?GOTO  Label
    else
      if ((Cin) < 100h)
        CLRWDT?
        MOVE?CA Cin
        CHK?RP  Bin
        subwf   Bin, W
        BIT?GOTO 1, STATUS, C, Label
      endif
    endif
    endm

CMPLE?BBL macro Bin1, Bin2, Label
        CLRWDT?
        MOVE?BA Bin1
        CHK?RP  Bin2
        subwf   Bin2, W
        BIT?GOTO 1, STATUS, C, Label
    endm

CMPLT?BBL macro Bin1, Bin2, Label
        CLRWDT?
        MOVE?BA Bin2
        CHK?RP  Bin1
        subwf   Bin1, W
        BIT?GOTO 0, STATUS, C, Label
    endm

CMPNE?BCB macro Bin, Cin, Bout
    if (((Cin) > -100h) & ((Cin) < 100h))
        MOVE?BA Bin
        sublw   Cin
	btfss	STATUS, Z
    endif
        movlw   -1
        MOVE?AB Bout
    endm

CMPNE?BCL macro Bin, Cin, Label
    if (((Cin) > -100h) & ((Cin) < 100h))
        CLRWDT?
        MOVE?BA Bin
        sublw   Cin
        BIT?GOTO 0, STATUS, Z, Label
    else
        L?GOTO  Label
    endif
    endm

CMPNE?TCL macro Regin, Bitin, Cin, Label
    if ((Cin) == 0)
        CLRWDT?
        BIT?GOTO 1, Regin, Bitin, Label
    else
      if ((Cin) == 1)
        CLRWDT?
        BIT?GOTO 0, Regin, Bitin, Label
      else
        L?GOTO  Label
      endif
    endif
    endm

CMPNE?WCL macro Win, Cin, Label
    if (((Cin) > -10000h) & ((Cin) < 10000h))
        MOVE?CW	Cin, R0
        MOVE?WWA Win, R1
        L?CALL  CMPNE
        BIT?GOTO 0, STATUS, Z, Label
    else
        L?GOTO  Label
    endif
    endm
CMPNE_USED = 1

DIG?BCW macro Bin, Cin, Wout
        MOVE?BW Bin, R0
        movlw   Cin
        L?CALL  DIG
        MOVE?AW Wout
    endm
DIG_USED = 1

GOTO?L macro Label
        L?GOTO  Label
    endm

PAUSE?C macro Cin
    if (((Cin) >> 8) == 0)
        MOVE?CA Cin
        L?CALL  PAUSE
    else
        MOVE?CB (Cin) >> 8, R1 + 1
        MOVE?CA low (Cin)
        L?CALL  PAUSEL
    endif
    endm
PAUSE_USED = 1


	LIST
